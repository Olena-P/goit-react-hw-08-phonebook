{"version":3,"file":"static/js/386.ef01ac85.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Contacts/ContactForm.jsx","components/Contacts/ContactItem.jsx","components/Contacts/ContactList.jsx","components/Contacts/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (items, filter) => {\n    return items.filter(item =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { selectContacts } from \"../../redux/contacts/selectors\";\nimport { addContact } from \"../../redux/contacts/operations\";\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string()\n      .min(2, \"Name must be at least 2 characters\")\n      .matches(\n        /^[A-Za-z\\s]+$/,\n        \"Invalid name format. Only letters and spaces are allowed.\"\n      )\n      .required(\"Name is required\"),\n    number: Yup.string()\n      .matches(/^\\d{10}$/, \"Phone number must be 10 digits\")\n      .required(\"Phone number is required\"),\n  });\n\n  const contacts = useSelector(selectContacts);\n\n  return (\n    <Formik\n      initialValues={{ name: \"\", number: \"\" }}\n      validationSchema={validationSchema}\n      onSubmit={(values, actions) => {\n        const isExist = contacts.some(\n          (contact) => contact.name.toLowerCase() === values.name.toLowerCase()\n        );\n        console.log(isExist);\n\n        if (isExist) {\n          actions.resetForm();\n          return alert(`${values.name} is alredy in contacts.`);\n        }\n        dispatch(addContact(values));\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <Field type=\"text\" name=\"name\" placeholder=\"Name\" />\n        <ErrorMessage name=\"name\" component=\"div\" style={{ color: \"red\" }} />\n\n        <Field type=\"tel\" name=\"number\" placeholder=\"Number\" />\n        <ErrorMessage name=\"number\" component=\"div\" style={{ color: \"red\" }} />\n\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/operations\";\n\nconst ContactItem = ({ contact: { name, number, id } }) => {\n  const dispatch = useDispatch();\n  return (\n    <li\n      style={{\n        marginBottom: \"10px\",\n        padding: \"10px\",\n        border: \"1px solid #ccc\",\n      }}\n    >\n      {name}: {number}\n      <button\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n        style={{ marginLeft: \"10px\", background: \"#f0f0f0\", cursor: \"pointer\" }}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nexport default ContactItem;\n","import { useSelector } from \"react-redux\";\nimport { selectVisibleContacts } from \"../../redux/contacts/selectors\";\nimport ContactItem from \"./ContactItem\";\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ul style={{ listStyle: \"none\", padding: 0 }}>\n      {contacts.map((contact) => (\n        <ContactItem key={contact.id} contact={contact} />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { selectFilter } from \"../../redux/contacts/selectors\";\nimport { changeFilter } from \"../../redux/contacts/filterSlice\";\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <div style={{ marginBottom: \"20px\" }}>\n      Filter contacts by name:\n      <input\n        id=\"filter\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={(e) => dispatch(changeFilter(e.target.value))}\n        style={{ marginLeft: \"10px\", padding: \"5px\" }}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"../redux/contacts/operations\";\nimport { selectError, selectIsLoading } from \"../redux/contacts/selectors\";\nimport ContactForm from \"../components/Contacts/ContactForm\";\nimport ContactList from \"../components/Contacts/ContactList\";\nimport Filter from \"../components/Contacts/Filter\";\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","item","name","toLowerCase","includes","ContactForm","dispatch","useDispatch","validationSchema","Yup","shape","min","matches","required","number","useSelector","_jsx","Formik","initialValues","onSubmit","values","actions","isExist","some","contact","console","log","resetForm","alert","concat","addContact","children","_jsxs","Form","Field","type","placeholder","ErrorMessage","component","style","color","_ref","id","marginBottom","padding","border","onClick","deleteContact","marginLeft","background","cursor","ContactList","listStyle","map","ContactItem","Filter","value","onChange","e","changeFilter","target","Contacts","useEffect","fetchContacts"],"sourceRoot":""}